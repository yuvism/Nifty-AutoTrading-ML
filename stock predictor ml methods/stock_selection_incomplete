{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPpnu5lWC8jLsSfuNCsBXUR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","import yfinance as yf\n","import matplotlib.pyplot as plt\n","import datetime\n","import math"],"metadata":{"id":"ZzGQzzHLD7d0","executionInfo":{"status":"ok","timestamp":1710506216327,"user_tz":-330,"elapsed":3,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["def calculate_difference(data, d):\n","    \"\"\"\n","    Input:\n","    data: A dataframe containing all the data related to stocks.\n","    d: A parameter, to adjust how many days to consider in the past.\n","    \"\"\"\n","    difference = [] # Store the deltas (changes) for the last d days.\n","    for index in range(d):\n","        difference.append(data[\"Close\"].shift(index) - data[\"Open\"].shift(index))\n","    return np.vstack(difference).T"],"metadata":{"id":"3kq7KfrSD9sg","executionInfo":{"status":"ok","timestamp":1710506217398,"user_tz":-330,"elapsed":421,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["def calculate_ema(data, window):\n","    \"\"\"\n","    Input:\n","    data: A dataframe containing all the data related to stocks.\n","    window: Window size for calculating the Exponential Moving Average (EMA).\n","    \"\"\"\n","    return data[\"Close\"].ewm(span=window, adjust=False).mean().values"],"metadata":{"id":"xe7akEzAD__I","executionInfo":{"status":"ok","timestamp":1710506217398,"user_tz":-330,"elapsed":10,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["def encode_month(data):\n","    month = data.index.month\n","    onehot_encoder = OneHotEncoder(sparse_output=False)\n","    return onehot_encoder.fit_transform(month.values.reshape(-1, 1))"],"metadata":{"id":"FMWjvvTyEB4O","executionInfo":{"status":"ok","timestamp":1710506217398,"user_tz":-330,"elapsed":9,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def prepare_data(data, d, window):\n","    \"\"\"\n","    A combined function to create both the feature vector and the corresponding labels.\n","    This shall return both the features and labels together, using the past prices.\n","    \"\"\"\n","    difference = calculate_difference(data, d)\n","    ema = calculate_ema(data, window)\n","    month_encoded = encode_month(data)\n","    # Create the feature vector.\n","    features = np.concatenate((difference, ema.reshape(-1, 1), month_encoded), axis=1)\n","    # Create the vector of labels.\n","    labels = (data[\"Close\"] - data[\"Open\"]).values.reshape(-1, 1)\n","\n","    # Adjust labels to calibrate the dataset properly.\n","    labels = np.roll(labels, -1)\n","    # Return the features along with their respective labels, and the feature vector of the input.\n","    return features[d:-1], labels[d:-1], features[-1]"],"metadata":{"id":"d9ZJHFHLED-V","executionInfo":{"status":"ok","timestamp":1710506217398,"user_tz":-330,"elapsed":9,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["def fetch_data(ticker_symbol, start_date, end_date):\n","    \"\"\"\n","    Fetch the historical records using yfinance.\n","    \"\"\"\n","    end_date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(\"%Y-%m-%d\")\n","    stock_data = yf.download(ticker_symbol, start=start_date, end=end_date)\n","    return stock_data"],"metadata":{"id":"a-M1SgW4EGBX","executionInfo":{"status":"ok","timestamp":1710506217398,"user_tz":-330,"elapsed":9,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Set the parameters.\n","d = 30                     # Price difference needs to be caluclated over the past 30 days.\n","window = 7                # Windown size for Exponential Moving Averages (EMA) calculation.\n","ticker_symbol = \"ADANIENT.NS\" # Ticker symbol of the stock.\n","start_date = \"2020-01-01\"  # Start date for fetching data.\n","end_date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(\"%Y-%m-%d\") # End date for fetching data.\n","\n","# Fetch historical data for the stock, and get its features v/s labels.\n","data = fetch_data(ticker_symbol, start_date, end_date)\n","features, labels, to_predict = prepare_data(data, d, window)\n","print(data)\n","print(features)\n","print(features.shape)\n","print(labels)\n","print(labels.shape)\n","print(to_predict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KXjVbwtgEH68","executionInfo":{"status":"ok","timestamp":1710506217399,"user_tz":-330,"elapsed":9,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"8f37bb40-eb59-493b-9dac-71c374a9752b"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["\r[*********************100%%**********************]  1 of 1 completed"]},{"output_type":"stream","name":"stdout","text":["                   Open         High          Low        Close    Adj Close  \\\n","Date                                                                          \n","2020-01-01   209.000000   210.449997   206.649994   207.850006   206.013153   \n","2020-01-02   208.000000   213.199997   207.500000   211.199997   209.333527   \n","2020-01-03   210.250000   212.350006   205.800003   208.300003   206.459152   \n","2020-01-06   207.750000   207.750000   197.750000   199.550003   197.786484   \n","2020-01-07   200.550003   205.699997   200.550003   204.050003   202.246735   \n","...                 ...          ...          ...          ...          ...   \n","2024-03-11  3241.199951  3259.000000  3200.000000  3207.350098  3207.350098   \n","2024-03-12  3207.350098  3222.699951  3111.000000  3122.500000  3122.500000   \n","2024-03-13  3125.000000  3138.050049  2850.149902  2906.199951  2906.199951   \n","2024-03-14  2927.449951  3101.199951  2880.000000  3087.449951  3087.449951   \n","2024-03-15  3111.000000  3143.399902  3061.250000  3132.199951  3132.199951   \n","\n","             Volume  \n","Date                 \n","2020-01-01  1553127  \n","2020-01-02  2991937  \n","2020-01-03  2512421  \n","2020-01-06  4353179  \n","2020-01-07  2966120  \n","...             ...  \n","2024-03-11   738851  \n","2024-03-12  1199487  \n","2024-03-13  3407040  \n","2024-03-14  3759100  \n","2024-03-15  2197262  \n","\n","[1044 rows x 6 columns]\n","[[ 3.80000305e+00  1.00006104e-01  5.00000000e+00 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]\n"," [ 1.64999390e+00  3.80000305e+00  1.00006104e-01 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]\n"," [ 3.64999390e+00  1.64999390e+00  3.80000305e+00 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]\n"," ...\n"," [-8.48500977e+01 -3.38498535e+01 -1.34499512e+01 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]\n"," [-2.18800049e+02 -8.48500977e+01 -3.38498535e+01 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]\n"," [ 1.60000000e+02 -2.18800049e+02 -8.48500977e+01 ...  0.00000000e+00\n","   0.00000000e+00  0.00000000e+00]]\n","(1013, 43)\n","[[   1.6499939 ]\n"," [   3.6499939 ]\n"," [  -4.3999939 ]\n"," ...\n"," [-218.80004883]\n"," [ 160.        ]\n"," [  21.19995117]]\n","(1013, 1)\n","[ 2.11999512e+01  1.60000000e+02 -2.18800049e+02 -8.48500977e+01\n"," -3.38498535e+01 -1.34499512e+01 -8.90500488e+01 -1.51000977e+01\n"," -1.78500977e+01  8.89990234e+00  6.53498535e+01 -9.01999512e+01\n"," -3.66999512e+01  5.57500000e+01  1.02500000e+01  2.40500488e+01\n"," -1.48000488e+01 -3.83999023e+01  1.88000488e+01  9.60009766e+00\n"," -2.60500488e+01  2.31999512e+01 -1.55004883e+00 -5.92500000e+01\n","  3.07500000e+01 -7.70000000e+01  9.80004883e+00  1.98500977e+01\n","  3.44995117e+00 -2.75000000e+01  3.12864489e+03  0.00000000e+00\n","  0.00000000e+00  1.00000000e+00  0.00000000e+00  0.00000000e+00\n","  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00\n","  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# Split data into training and testing sets.\n","X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n","\n","# Scale all the feature vectors.\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.fit_transform(X_test)\n","print(X_train_scaled)\n","print(X_test_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1CxpYINEEJ9a","executionInfo":{"status":"ok","timestamp":1710506217399,"user_tz":-330,"elapsed":7,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"cd12059e-df5b-4638-eab5-27e08b8fa574"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.15975027  0.12147221  0.08593352 ... -0.29040893 -0.30029147\n","   3.22621306]\n"," [-0.12760187  0.35740636 -1.27172145 ... -0.29040893 -0.30029147\n","   3.22621306]\n"," [-0.76164119 -0.05709263  0.30077234 ...  3.44342023 -0.30029147\n","  -0.30996093]\n"," ...\n"," [-0.31968532  0.30003804  0.47231711 ... -0.29040893 -0.30029147\n","  -0.30996093]\n"," [ 0.61029519  0.48910768  0.28770345 ... -0.29040893  3.33009793\n","  -0.30996093]\n"," [ 0.01451385 -0.04497421 -0.04395008 ... -0.29040893 -0.30029147\n","  -0.30996093]]\n","[[-1.99115214  0.41236997 -0.19709725 ... -0.30232077  3.67423461\n","  -0.29250897]\n"," [-0.52096363  0.06060817 -0.16973795 ... -0.30232077 -0.27216553\n","  -0.29250897]\n"," [-0.97657091  1.54541084  0.60570923 ... -0.30232077  3.67423461\n","  -0.29250897]\n"," ...\n"," [-0.14423525  0.56536726  0.0230372  ... -0.30232077 -0.27216553\n","  -0.29250897]\n"," [-0.08915517  0.30076021  0.63804666 ... -0.30232077 -0.27216553\n","  -0.29250897]\n"," [ 0.01420653  0.09634922  0.0796243  ... -0.30232077 -0.27216553\n","   3.41869858]]\n"]}]},{"cell_type":"code","source":["# Reshape input data for LSTM layer\n","X_train_reshaped = X_train_scaled.reshape((X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))\n","X_test_reshaped = X_test_scaled.reshape((X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))\n","\n","# Build LSTM Model.\n","model = tf.keras.Sequential([\n","    tf.keras.layers.LSTM(64, input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model.\n","model.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\n","\n","# Train the model.\n","history = model.fit(X_train_reshaped, y_train, epochs=50, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GEQD9dn-ETjN","executionInfo":{"status":"ok","timestamp":1710506224878,"user_tz":-330,"elapsed":7483,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"f1fe24c1-e5b1-41a7-8e45-82d9835bb39e"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","26/26 [==============================] - 2s 5ms/step - loss: 3342.6367\n","Epoch 2/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3338.4636\n","Epoch 3/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3336.0469\n","Epoch 4/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3332.5935\n","Epoch 5/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3329.3853\n","Epoch 6/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3325.2195\n","Epoch 7/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3320.7769\n","Epoch 8/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3315.4272\n","Epoch 9/50\n","26/26 [==============================] - 0s 5ms/step - loss: 3309.0876\n","Epoch 10/50\n","26/26 [==============================] - 0s 5ms/step - loss: 3302.6274\n","Epoch 11/50\n","26/26 [==============================] - 0s 4ms/step - loss: 3294.3669\n","Epoch 12/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3286.4458\n","Epoch 13/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3276.2847\n","Epoch 14/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3265.7148\n","Epoch 15/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3254.8608\n","Epoch 16/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3242.6919\n","Epoch 17/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3230.3120\n","Epoch 18/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3216.3286\n","Epoch 19/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3202.3259\n","Epoch 20/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3186.8562\n","Epoch 21/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3171.2988\n","Epoch 22/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3155.6287\n","Epoch 23/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3140.3110\n","Epoch 24/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3123.3389\n","Epoch 25/50\n","26/26 [==============================] - 0s 3ms/step - loss: 3107.1672\n","Epoch 26/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3090.5454\n","Epoch 27/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3073.4407\n","Epoch 28/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3057.9146\n","Epoch 29/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3042.5347\n","Epoch 30/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3025.5862\n","Epoch 31/50\n","26/26 [==============================] - 0s 2ms/step - loss: 3010.2732\n","Epoch 32/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2993.7893\n","Epoch 33/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2978.6958\n","Epoch 34/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2961.9707\n","Epoch 35/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2946.3704\n","Epoch 36/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2930.4534\n","Epoch 37/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2914.6179\n","Epoch 38/50\n","26/26 [==============================] - 0s 3ms/step - loss: 2898.8730\n","Epoch 39/50\n","26/26 [==============================] - 0s 3ms/step - loss: 2883.3396\n","Epoch 40/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2867.7676\n","Epoch 41/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2853.0488\n","Epoch 42/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2837.3621\n","Epoch 43/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2822.3259\n","Epoch 44/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2806.6157\n","Epoch 45/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2792.0840\n","Epoch 46/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2777.2327\n","Epoch 47/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2763.4055\n","Epoch 48/50\n","26/26 [==============================] - 0s 3ms/step - loss: 2748.3127\n","Epoch 49/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2733.5632\n","Epoch 50/50\n","26/26 [==============================] - 0s 2ms/step - loss: 2719.9209\n"]}]},{"cell_type":"code","source":["# Evaluate the model.\n","loss = model.evaluate(X_test_reshaped, y_test, verbose=0)\n","print(\"Test Loss:\", loss)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ExvRkRGiEVwX","executionInfo":{"status":"ok","timestamp":1710506225641,"user_tz":-330,"elapsed":765,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"9e59e62e-d99e-4bd0-c451-f9888e0e590f"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Loss: 8579.669921875\n"]}]},{"cell_type":"code","source":["# Make predictions on the test data\n","y_pred = model.predict(X_test_reshaped)\n","\n","# Checking the actual values\n","for index in range(len(y_test)):\n","    print(y_test[index], y_pred[index])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aqGdR6APEX6o","executionInfo":{"status":"ok","timestamp":1710506225642,"user_tz":-330,"elapsed":10,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"bf7d3b57-d577-4830-af4c-aae516df2dfb"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["7/7 [==============================] - 0s 2ms/step\n","[11.10009766] [-13.110136]\n","[34.] [18.640999]\n","[-41.5] [7.917771]\n","[-5.] [0.6133492]\n","[-77.55004883] [1.7315376]\n","[0.] [-2.4662728]\n","[-25.05004883] [3.1425757]\n","[-6.69995117] [31.19223]\n","[30.59997559] [8.938498]\n","[-0.69995117] [7.8882794]\n","[-61.60009766] [2.9005978]\n","[-1.69995117] [-4.7846837]\n","[-45.29980469] [-2.4947598]\n","[7.80004883] [21.18024]\n","[1.3999939] [4.197909]\n","[-77.] [3.8789358]\n","[316.10009766] [-2.33982]\n","[0.1000061] [-4.8546968]\n","[15.1000061] [-0.12570713]\n","[-37.34985352] [-1.1524318]\n","[29.] [4.3661532]\n","[-14.69995117] [2.8480916]\n","[17.80004883] [-7.409385]\n","[46.95007324] [-17.182098]\n","[-1.85009766] [-25.184708]\n","[-573.55004883] [-32.410904]\n","[17.65002441] [0.64541185]\n","[-3.40002441] [5.9529977]\n","[-20.85009766] [7.295479]\n","[31.05004883] [3.7457218]\n","[-45.10009766] [-21.892776]\n","[9.25] [-4.431487]\n","[-0.34999084] [-1.3957008]\n","[25.69995117] [-1.6693558]\n","[-46.94995117] [1.2526661]\n","[80.44995117] [11.712574]\n","[-21.44995117] [-4.801087]\n","[39.69995117] [-10.42634]\n","[-22.75] [11.017863]\n","[6.95001221] [2.8078046]\n","[65.80004883] [11.780418]\n","[-28.55004883] [5.998517]\n","[55.94995117] [-2.667115]\n","[1.59999084] [0.7203428]\n","[-13.5] [-16.685394]\n","[-1.05000305] [-0.29007965]\n","[15.14996338] [4.3992777]\n","[6.04998779] [-0.26064837]\n","[-2.3500061] [6.8701334]\n","[-2.3500061] [0.56979734]\n","[-44.] [30.46732]\n","[-104.89990234] [-1.6645218]\n","[-16.59997559] [-22.649113]\n","[-66.89990234] [15.085766]\n","[-6.84997559] [1.9461795]\n","[10.04998779] [-5.3636403]\n","[-2.75] [20.623438]\n","[10.75] [-2.9757364]\n","[4.69999695] [1.5358579]\n","[9.75] [11.52824]\n","[15.85009766] [-0.70249224]\n","[-0.8999939] [-0.04678533]\n","[-23.64990234] [-16.752121]\n","[0.25] [-0.6192502]\n","[7.8999939] [2.484713]\n","[107.34997559] [-21.973911]\n","[47.79992676] [11.561326]\n","[34.94995117] [3.797747]\n","[11.5] [-0.46839714]\n","[7.05001831] [0.00939393]\n","[26.89990234] [-8.710488]\n","[34.60009766] [-2.937448]\n","[87.60009766] [-18.045038]\n","[20.25] [-20.260464]\n","[-146.69995117] [12.080807]\n","[63.79992676] [-5.0060616]\n","[-25.19995117] [-2.120887]\n","[2.60009766] [-9.78898]\n","[-151.44995117] [2.0268934]\n","[-0.55004883] [-36.875626]\n","[-12.30004883] [17.301226]\n","[-41.09985352] [-20.246567]\n","[1.30000305] [6.1187224]\n","[-73.35009766] [2.195417]\n","[8.] [-3.9819496]\n","[2.44995117] [-10.270131]\n","[1.25] [-0.5304523]\n","[-70.44995117] [20.165836]\n","[0.94999695] [-0.42557675]\n","[-12.30004883] [-25.327703]\n","[24.80004883] [7.4786143]\n","[-25.90002441] [7.084685]\n","[-19.05004883] [-6.780329]\n","[-31.09997559] [2.7560892]\n","[-15.19995117] [-5.1207204]\n","[-38.09985352] [15.662194]\n","[70.35009766] [-9.494897]\n","[8.6499939] [3.0875936]\n","[33.55004883] [-7.9909015]\n","[11.35009766] [-21.920706]\n","[-33.64990234] [-2.4329338]\n","[32.14990234] [-7.209477]\n","[24.69995117] [15.803973]\n","[-1.8500061] [-0.78055954]\n","[-3.8999939] [-0.75093836]\n","[-49.89990234] [-12.979942]\n","[59.09997559] [-3.8172321]\n","[-23.69995117] [9.093995]\n","[-5.44995117] [0.76838666]\n","[-7.15002441] [2.5977612]\n","[23.90014648] [34.32982]\n","[-2.69999695] [0.56114006]\n","[9.30004883] [-3.1930037]\n","[-64.40002441] [-1.9913052]\n","[-0.29998779] [4.587754]\n","[-49.55004883] [-33.888046]\n","[12.30004883] [5.060968]\n","[-118.39990234] [-10.305395]\n","[-38.5] [12.921546]\n","[16.60009766] [-31.926428]\n","[7.05004883] [0.84564984]\n","[-6.30004883] [-1.1003878]\n","[74.19995117] [2.939999]\n","[10.25] [3.1970432]\n","[-14.09997559] [16.687386]\n","[-4.30000305] [0.8044346]\n","[-23.40002441] [6.019811]\n","[-72.35009766] [-13.136218]\n","[-9.] [1.4552293]\n","[-13.25] [0.5026556]\n","[-233.39990234] [5.7247615]\n","[-12.05004883] [-21.640125]\n","[2.19995117] [-6.8153434]\n","[61.95001221] [6.4151697]\n","[32.79992676] [-9.7357025]\n","[-22.05004883] [2.83615]\n","[-32.5] [5.0712543]\n","[5.65002441] [0.94543946]\n","[33.20001221] [0.76053476]\n","[23.64990234] [1.0350353]\n","[-218.80004883] [5.0119348]\n","[-13.69995117] [-4.485203]\n","[-33.84985352] [14.557161]\n","[8.94995117] [14.80265]\n","[2.19999695] [-0.3407129]\n","[-0.1499939] [8.456682]\n","[59.69995117] [-7.845556]\n","[-2.15000153] [3.6872184]\n","[-2.5] [-1.4760772]\n","[0.] [6.750089]\n","[4.09997559] [12.996421]\n","[-57.] [-8.63623]\n","[17.44995117] [-7.695129]\n","[9.19995117] [-6.359564]\n","[-19.80004883] [-26.830265]\n","[23.8999939] [4.466742]\n","[-15.14996338] [-6.065846]\n","[3.19995117] [1.1737047]\n","[-61.69995117] [6.596932]\n","[-112.80004883] [-16.011217]\n","[2.80004883] [2.4222388]\n","[-20.] [7.53266]\n","[-6.30004883] [6.969737]\n","[-13.34985352] [-0.3632847]\n","[95.94995117] [-16.200294]\n","[11.75] [-14.454351]\n","[-25.19995117] [-8.788248]\n","[-8.90000916] [-0.40581208]\n","[-2.] [3.675307]\n","[16.64990234] [21.051245]\n","[-10.89990234] [-4.534406]\n","[-24.19995117] [3.66098]\n","[-242.30004883] [11.387571]\n","[1.25] [-10.676594]\n","[-9.25] [13.459974]\n","[35.69995117] [4.547644]\n","[23.19995117] [-5.3897405]\n","[-39.10009766] [3.157398]\n","[-51.39996338] [-2.3347697]\n","[0.34997559] [7.20163]\n","[-32.94995117] [-8.465672]\n","[-54.90002441] [-27.102385]\n","[7.25] [0.42877328]\n","[-44.05004883] [-0.34916437]\n","[-6.15002441] [-2.4957979]\n","[22.64990234] [7.7781596]\n","[-32.] [-7.08109]\n","[-7.30004883] [-23.640263]\n","[-70.84985352] [12.231365]\n","[231.94995117] [17.505058]\n","[96.80004883] [-21.10349]\n","[94.80004883] [-19.720047]\n","[-27.] [-15.874209]\n","[-14.25] [12.533756]\n","[-859.64990234] [14.222048]\n","[-3.5] [-8.2464905]\n","[-30.44995117] [9.908788]\n","[5.05004883] [11.195922]\n","[14.5] [-9.07811]\n","[190.65002441] [37.21792]\n","[41.69995117] [3.3590975]\n","[33.25] [-12.976648]\n","[-4.1000061] [8.743102]\n"]}]},{"cell_type":"code","source":["# Visualising the results.\n","plt.scatter(y_pred, y_test)\n","plt.xlabel(\"Predicted value\")\n","plt.ylabel(\"Actual value\")\n","\n","# Plot y = x line on the same plot to visualise the accuracy.\n","plt.plot(y_pred, y_pred, color='red')\n","\n","plt.title('Predicted vs Actual Deltas')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":509},"id":"YcKY5KbBEa1W","executionInfo":{"status":"ok","timestamp":1710506226299,"user_tz":-330,"elapsed":664,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"a250e711-c460-4111-8ae7-e21dce4eec74"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Scale and reshape the feature vector which needs to be predicted.\n","to_predict = to_predict.reshape((1, to_predict.shape[0]))\n","to_predict = scaler.fit_transform(to_predict)\n","to_predict = to_predict.reshape((1, 1, to_predict.shape[1]))\n","\n","# Use the trained LSTM model to predict the output for the feature vector.\n","predicted_output = model.predict(to_predict)\n","print(\"Predicted output:\", predicted_output)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g7ofkihPEpBN","executionInfo":{"status":"ok","timestamp":1710506226299,"user_tz":-330,"elapsed":5,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"ffa4dd84-7c38-41b8-cd86-7777b3ea674d"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 18ms/step\n","Predicted output: [[1.7749732]]\n"]}]}]}