{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMNao+PwRNDzNMGRAUHoxMz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["\"\"\"\n","Fetching models from Google Drive.\n","\"\"\"\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xomTidOELcRR","executionInfo":{"status":"ok","timestamp":1710860300056,"user_tz":-330,"elapsed":23315,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"c3762a4c-a0b1-4a73-d9b6-de8e489ca9b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"78TQ7GLMHBmA"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.preprocessing import MinMaxScaler\n","from keras.models import Sequential, load_model\n","from keras.layers import Dense, LSTM\n","import yfinance as yf\n","import datetime\n","import math"]},{"cell_type":"code","source":["def get_quote(ticker, days=7):\n","    # Initialising the same scalar on which the model was trained.\n","    scaler = MinMaxScaler(feature_range=(0, 1))\n","    df = yf.download(ticker, start=\"2023-01-01\", end=\"2024-03-20\")\n","    data = df.filter([\"Close\"])\n","    dataset = data.values\n","    scaled_data = scaler.fit_transform(dataset)\n","\n","\n","    # Get the closing price of the current day and the closing price of the next day.\n","    end_date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(\"%Y-%m-%d\")\n","    quote = yf.download(ticker, start=\"2023-01-01\", end=end_date)\n","\n","    # Get the closing prices.\n","    new_df = quote.filter([\"Close\"])\n","    dataset = new_df.values\n","    curr_closing = dataset[-1]\n","    scaled_data = scaler.transform(dataset)\n","\n","    # Create the testing dataset.\n","    x_test = []\n","    x_test.append(scaled_data[(len(scaled_data) - days): len(scaled_data)])\n","\n","    # Convert the data to a NumPy array.\n","    x_test = np.array(x_test)\n","    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n","\n","    model = load_model(f'/content/drive/My Drive/trading/self_attempt/models/{ticker}')\n","\n","    # Get the values and print.\n","    pred_price = model.predict(x_test)\n","\n","    # Inverse the scaling.\n","    pred_price = scaler.inverse_transform(pred_price)\n","    # Return the required values for the new dataframe.\n","    return curr_closing, pred_price"],"metadata":{"id":"UQ5hZKp8IbwK","executionInfo":{"status":"ok","timestamp":1710866570260,"user_tz":-330,"elapsed":475,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["tickers = [\n","    \"RELIANCE.BO\",\n","    \"TCS.BO\",\n","    \"HDFCBANK.BO\",\n","    \"INFY.BO\",\n","    \"HDFC.BO\",\n","    \"ICICIBANK.BO\",\n","    \"BHARTIARTL.BO\",\n","    \"HINDUNILVR.BO\",\n","    \"SBIN.BO\",\n","    \"KOTAKBANK.BO\",\n","    \"LT.BO\",\n","    \"AXISBANK.BO\",\n","    \"ITC.BO\",\n","    \"MARUTI.BO\",\n","    \"WIPRO.BO\",\n","    \"ASIANPAINT.BO\",\n","    \"BAJFINANCE.BO\",\n","    \"M&M.BO\",\n","    \"SUNPHARMA.BO\",\n","    \"TITAN.BO\"\n","]\n","\n","closing_price, predicted_price = [], []\n","for ticker in tickers:\n","    curr_closing, pred_price = get_quote(ticker)\n","    closing_price.append(curr_closing)\n","    predicted_price.append(pred_price)\n","\n","# results variable to store a dataframe.\n","data = {\n","    \"Ticker\": tickers,\n","    \"Closing Price Today\": closing_price,\n","    \"Predicted Closing Price\": predicted_price\n","}\n","results = pd.DataFrame(data)\n","\n","# Get the % increment predicted, and sort based on it.\n","results[\"Difference\"] = 100 * (results[\"Predicted Closing Price\"] - results[\"Closing Price Today\"]) / results[\"Closing Price Today\"]\n","results = results.sort_values(by=\"Difference\", ascending=False)\n","\n","print(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dMkqI6HNLqGt","executionInfo":{"status":"ok","timestamp":1710867220813,"user_tz":-330,"elapsed":51299,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"06f18277-ac17-48ca-82c1-e7fee5530408"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 157ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 159ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 161ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 166ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 274ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 163ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 154ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 184ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 162ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 205ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 176ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 157ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 151ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 152ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 247ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 146ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 160ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 162ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 176ms/step\n"]},{"output_type":"stream","name":"stderr","text":["[*********************100%%**********************]  1 of 1 completed\n","[*********************100%%**********************]  1 of 1 completed\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 235ms/step\n","           Ticker   Closing Price Today Predicted Closing Price  \\\n","1          TCS.BO   [3977.550048828125]           [[4381.4116]]   \n","17         M&M.BO              [1843.0]           [[2000.8066]]   \n","18   SUNPHARMA.BO  [1551.1500244140625]           [[1676.9474]]   \n","19       TITAN.BO   [3582.550048828125]            [[3799.505]]   \n","7   HINDUNILVR.BO   [2269.300048828125]            [[2380.344]]   \n","8         SBIN.BO   [723.0999755859375]            [[756.9379]]   \n","11    AXISBANK.BO  [1049.5999755859375]            [[1089.904]]   \n","2     HDFCBANK.BO   [1448.949951171875]           [[1503.8438]]   \n","10          LT.BO   [3502.449951171875]           [[3549.4512]]   \n","5    ICICIBANK.BO   [1084.050048828125]           [[1098.3568]]   \n","12         ITC.BO               [409.5]           [[414.58307]]   \n","13      MARUTI.BO            [11597.25]           [[11705.967]]   \n","3         INFY.BO   [1561.949951171875]            [[1575.679]]   \n","14       WIPRO.BO  [494.79998779296875]           [[498.81854]]   \n","6   BHARTIARTL.BO  [1227.8499755859375]           [[1237.4087]]   \n","15  ASIANPAINT.BO             [2815.25]             [[2836.37]]   \n","9    KOTAKBANK.BO  [1748.8499755859375]           [[1751.1079]]   \n","4         HDFC.BO    [2765.39990234375]           [[2755.6277]]   \n","16  BAJFINANCE.BO             [6592.25]           [[6565.5337]]   \n","0     RELIANCE.BO             [2850.75]           [[2744.3425]]   \n","\n","                  Difference  \n","1     [[10.153525846509753]]  \n","17     [[8.562487282962561]]  \n","18     [[8.109941740082117]]  \n","19     [[6.055877266957996]]  \n","7       [[4.89331260402711]]  \n","8      [[4.679567529059438]]  \n","11     [[3.839946463979081]]  \n","2      [[3.788522770143182]]  \n","10    [[1.3419526719403654]]  \n","5     [[1.3197511231864556]]  \n","12    [[1.2412866538843101]]  \n","13    [[0.9374360031472978]]  \n","3     [[0.8789656733847087]]  \n","14    [[0.8121573942280329]]  \n","6     [[0.7784921619394929]]  \n","15    [[0.7502039672320397]]  \n","9    [[0.12910967789309646]]  \n","4    [[-0.3533744536764027]]  \n","16  [[-0.40526843784368005]]  \n","0      [[-3.73261319663685]]  \n"]}]}]}